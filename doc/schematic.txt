*schematic.txt*                                    Provides project information.
==============================================================================
INTRODUCTION                                                         *schematic*

Schematic is a Neovim plugin that provides structured projects (with
configuration and target information) similar to that of IDEs like Xcode or
Visual Studio.


CONFIGURATION
Schematic supports the following options:

                                             *schematic.options.schematic_files*
    schematic_files: ~
      A list of file names that contain project definition information for
      Schematic. The first file found in an upwards directory traveral from
      the working directory will be used.

      The default value is `{"schematic.json"}`.

                                             *schematic.options.use_task_runner*
                                                       *schematic.options.hooks*
    hooks: ~
      A table of functions Schematic will call upon certain events. The
      following keys (and their triggering events) are available:

        clean       The active target's clean task was invoked.
        build       The active target's build task was invoked.
        run         The active target's run task was invoked.
        config_set  The active configuration has been changed.
        target_set  The active target has been changed.

      All values are Lua functions that will be called with the table of the
      active project. Each key defaults to having a the value `nil`.

                                                *schematic.options.on_activated*
    on_activated: ~
      A callback invoked when a project is activated. The callback will be
      passed the table that describes the loaded project.

      The default value is `nil`.


SCHEMATIC JSON FILE                                             *schematic.json*
A `schematic.json` file sits at the root of a project's directory and 
describes the project's configurations and targets. An example `schematic.json`
file looks like:
>json
{
  "name": "My Project",
  "tasks": {
    "clean": "make clean",
    "build": "make ${target.name}",
    "run": "${target.name}",
  },
  "configs": [
    {
      "name": "Debug",
      "directory": "build/debug"
    },
  ],
  "targets": [
    {
      "name": "My App",
      "path": "${config.directory}/myapp"
    },
  ]
}
<

Schematic files support placeholder replacement in tasks and targets. At
runtime the active target and its tasks will have the following placeholders
substituted:

    `${target.name}`       Replaced by the "name" key of the project's active
                           target.

    `${config.directory}`  Replaced by the "directory" key of the project's
                           active configuration.


COMMANDS                                                    *schematic.commands*
Schematic provides two commands:

:Config {name}                                                         *:Config*
    Sets the active configuration for the active project to {name}. If {name}
    is omitted, `vim.ui.select()` is used to prompt for the configuration.

:Target {name}                                                         *:Target*
    Sets the active target for the active project to {name}. If {name} is
    omitted, `vim.ui.select()` is used to prompt for the target.


LUA API                                                          *schematic.api*
                                                           *schematic.project()*
schematic.project()
    Returns the project table for the current directory, or `nil`.

                                                     *schematic.select_config()*
schematic.select_config()
    Uses `vim.ui.select()` to prompt for the configuration to set active.

                                                     *schematic.select_target()*
schematic.select_target()
    Uses `vim.ui.select()` to prompt for the target to set active.

                                                              *schematic.scan()*
schematic.scan([directory])
    Scans the specified directory (if omitted, the current directory is used)
    and all parent directories for a valid Schematic file. If one is found, it
    is loaded and the corresponding project table is returned. Otherwise, the
    function returns nil.

                                                       *schematic.project_table*
A project table has the following structure:
>lua
{
  name = "My Project",
  root = "path/to/myproject"
  metadata = {
      -- An empty table you can insert arbitrary key-value data into.
  },

  configs = {
      { name = "Debug" directory = "build/debug" },
  },
  config = {
      -- A copy of the active configuration from the configs list.
  }

  targets = {
    {
      name = "My App"
      path = "${config.directory}/myapp",
      tasks = {
        clean = "make clean",
        build = "make myapp",

        -- If a run task isn't specified in schematic.json, the task will default
        -- to trying to execute the target's path.
        run = "${config.directory}/myapp",
      },
    },
  },
  target = {
      -- A copy of the active target from the targets list, with placeholders resolved.
  }
}
<

